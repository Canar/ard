%shell%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
record(M)
:-( M==halt,!,fail
);( M==line,line_keys(K),maplist(retractall,K),line_keys_line(K,L),record(line(L))
);( get_time(T),asserta(logged(T,M))
).
last_logged(T,M):-(logged(T,M);logged(T,init)),!.
logged_before(Ma,T,M,R)
:-(	last_logged(Tl,Ma)
,	(findall(logged(T,M),(logged(T,M),T>Tl),L);L=[])
,	reverse(L,R)
),!.

partial_line(Z):-line_keys(L),line_keys_atom(L,Z).
line_keys(L):-logged_before(keycode(13),_,key(_),L).
lblk(L,K):-L=logged(_,key(K)).
line_keys_atom(K,Z):-maplist(lblk,K,L)->c(L,Z);Z=''.
cursor(['_',' ','.',',']).
print_logs:-get_time(Now),findall([D,M],(logged(T,M),D is Now-T),L),maplist(format('~0f ~|~w~n'),L).
print_prompt:-cursor([U|_]),partial_line(C),p(['wiz> ',C,U]),flush_output.
refresh_tty:-notrace((clear_tty,print_prompt,print_logs,!)).

handle_message(timeout):-cursor(Ca),rotate(Ca,Cb),abolish(cursor,1),asserta(cursor(Cb)).
handle_message(M):-M=..[P|_],member(P,[get,init]). 
handle_message(terminal(C))
:- ( member(C,[-1,27]),R=halt
   ; C>=32,atom_codes(A,[C]),R=key(A)
   ; C==13,R=line
   ; R=keycode(C)
),!, record(R).
message_wait(M):-either(M,(thread_self(S),thread_get_message(S,Mt,[timeout(1)])),Mt,timeout).
dispatch:-message_wait(M),!,handle_message(M).

get_async(N,P):-G=..[P,D],L=..[N,D],get(N,(G,report(L))).

:- redefine_system_predicate(get(_)),redefine_system_predicate(get(_,_)).
get(Name,Goal):-thread_repeat(Name,Goal),report(get(Name)).
get(terminal):-get_async(terminal,get_single_char).
get(process):-argv(List),!,try(List),halt.
get(event):-
	record(init),
	thread_repeat(events,(refresh_tty,dispatch)),
	maplist(get,[terminal]),
	thread_join(events,_).

