arg([Z,D,C,B|A]):-current_prolog_flag(argv,[Z,D,C,B|E]),!,(E=[trace|F]->(A=F,trace);A=E).
argv(Argv):-Arg=[_,_,_,_|Argv],arg(Arg).

:-discontiguous abbreviation/2.

abbreviation(c,cat).
cat(List,Separator,Atom):-List=[_|_]->atomic_list_concat(List,Separator,Atom);Atom=List.
cat(L,A):-cat(L,'',A).
c(L,S,A):-cat(L,S,A).
%c([],_,'').
c(L,A):-c(L,'',A).

abbreviation(p,pri).
pri(Term):-print(Term).
pril(Term):-pri(Term),pri('\n').
p(X):-notrace(p__(X)).
%p(X):-notrace(p_(X)).
%p(X):-notrace(p2(X)).
p__(L):-maplist(pri,L),nl.
p_([[H]|T]):-p_(H),p_(T).
p_([H|T]):-p_(H),p_(T).
p_([]):-nl.
p_(P):-print(P).

println(X):-print(X),nl.
pl(X):-maplist(println,X).
%list line printer. pl([a,b,c])='a\nb\nc\n'.
pt(Term):-Term=..List,pt(List).
pt(Term):-pl(Term). %not actually a term!
pc([H|T]):-atom_codes(A,H),print(A),nl,pc(T).
pc([]).

per(Predicate,Parameters):-apply(maplist,[Predicate|Parameters]).

fun(Fun,List):-Fun=..List.

cmd(Bin,Arg,In,Out,Err):-process_create(path(Bin),Arg,[In,Out,Err]).
abbreviation(x,cmd).
x(Bin,Arg,In,Out,Err):-cmd(Bin,Arg,In,Out,Err).
x([Bin,Arg],In,Out,Err):-x(Bin,Arg,stdin(In),stdout(Out),stderr(Err)).
x(Bin,Args):-x([Bin,Args],std,std,std).
x(Cmd):-x(Cmd,std,std,std).
xs(X,S):-shell(X,S).
xt(Cmd):-shell(Cmd,Status),Status=0;throw('Exception!').
xtl(Bin,Args):-c([Bin|Args],' ',Cmd),xt(Cmd).
xcp(Bin,Args,In,Out,Err):-process_create(path(Bin),Args,[stdin(In),stdout(Out),stderr(Err)]).
xcps(Bin,Args,InS,OutS,ErrS):-xcp(Bin,Args,pipe(InS),pipe(OutS),pipe(ErrS)).
xpo(Bin,Args,Out):-xcp(Bin,Args,null,pipe(Out),null).
xcpso(Bin,Args):-
	current_output(Co),
	xcpo(Bin,Args,Xo),
	copy_stream_data(Xo,Co).
xo(Bin,Args,Codes):-
	xcpo(Bin,Args,Out),
	read_stream_to_codes(Out,Codes),
	close(Out).
xp(Bin,Args,Phrase):-xo(Bin,Args,Codes),phrase(Phrase,Codes).

exitcode(Cmd,0):-p([Cmd,' completed successfully.']).
exitcode(Cmd,Status):-p([Cmd,' returned ',Status]).

thread_repeat(N,G):-thread_create(until_failure(G),_,[alias(N)]).

until_error(G,E):-enquire((repeat, \+ G),E).
until_failure(G):-demand((repeat, \+ G)).
print_error_and_fail(E):-print_error(E),!,fail.
print_error(E):-print(error(E)),nl,flush. %print_message(error,E).

enquire(G,E):-prepare(G,'='(E)).
request(G):-prepare(G,print_error).
demand(G):-prepare(G,print_error_and_fail).
prepare(Goal,Recovery):-catch(Goal,Error,call(Recovery,Error)).

either(Var,If,Then,Else):-call(If)->Var=Then;Var=Else.
rotate([H|T],R):-append([T,[H]],R).
try(I)
:- I==[]
 ; F=..I,demand(F)
 ; I=[H|T],demand(H),try(T)
 ; I=[H|T],F=..[H,T],demand(F)
 ; demand(I)
 .
